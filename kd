#!/usr/bin/env bash
# kd - A Terminal User Interface wrapper for Kubernetes commands
#
# kd is a wrapper around common kubernetes commands to simplify running various
# k8s tasks without needing to remember commands or rely on bash-completion.
# It supplies a text UI (optionally using the 'dialog' tool) for prompts.
# 
# Run 'kd' and select a command, or select DEFAULT to always use the defaults.

set -eu
[ "${DEBUG:-0}" = "1" ] && set -x

HAS_DIALOG=0

__cleanup () {
    if [ -n "${tmpfile:-}" ] ; then rm -f "$tmpfile" ; fi
}
trap __cleanup EXIT

__err () { printf "%s: Error: %s\n" "$0" "$*" 1>&2 ; }
__errexit () { __err "$*" ; exit 1 ; }

__cmd_commands () {
    if [ $# -lt 1 ] ; then
        echo "gcloud_config_configurations"
        echo "kubectx"
        echo "kubens"
    else
        # Run any '__cmd_*' function name passed, with arguments
        local cmd="$1"; shift; __cmd_"$cmd" "$@"
    fi
}
__cmd_default () { __sel_output __cmd_commands __cmd_commands ; }
__cmd_kubectx () {
    command -v kubectx >/dev/null || \
        __kube_install_or_fail "kubectx" "ctx"
    __sel_output kubectx kubectx "$(kubectx -c)"
}
__cmd_kubens () {
    command -v kubectx >/dev/null || \
        __kube_install_or_fail "kubens" "ns"
    __sel_output kubens kubens "$(kubens -c)"
}
__cmd_gcloud_config_configurations () {
    command -v gcloud >/dev/null || \
        { echo "Error: please install gcloud" ; exit 1 ; }
    local current="$(gcloud config configurations list --format="csv(is_active,name)" | tail -n +2 | grep -E '^True,' | awk -F , '{print $2}')"
    __sel_output \
        "gcloud config configurations list --format=\"csv(name)\" | tail -n +2 | awk '{print \$1}'" \
        "gcloud config configurations activate" \
        "$current"
}

__kube_install_or_fail () {
    cmd="$1" krewarg="$2"
    kubectl krew version >/dev/null 2>&1 && \
        kubectl krew install "$krewarg"
    if [ $? -ne 0 ] ; then
        __errexit "Please install command '$cmd'"
    fi
}

__sel_output () {
    local listcmd="$1"
    local selcmd="$2"
    shift 2
    local current="${1:-}"
    local output tmpoutput
    # hack to stop special chars (pipe symbol) from being escaped by bash
    eval "tmpoutput=\$($listcmd)"
    declare -a sellist=( $tmpoutput )
    declare -a execlist=()

    if [ $HAS_DIALOG -eq 1 ] ; then
        execlist=(dialog --menu "Select a context" 0 0 0 0 "(DEFAULT)")
    else
        execlist=("Select a context:")
    fi

    # Make the list of options, and identify the currently selected option
    for i in `seq 1 ${#sellist[@]}` ; do
        if [ -n "${current:-}" ] && [ "${sellist[$((i-1))]}" = "$current" ] ; then
            execlist+=("$i" "${sellist[$((i-1))]} (SELECTED)")
        else
            execlist+=("$i" "${sellist[$((i-1))]}")
        fi
    done

    if [ $HAS_DIALOG -eq 1 ] ; then
        tmpfile="$(mktemp)"
        "${execlist[@]}" 2>"$tmpfile"
        output="$(cat "$tmpfile")"
    else
        printf "\n%s\n" "${execlist[0]}"
        c=1
        while [ $c -lt ${#execlist[@]} ] ; do
            printf "  %s  %s\n"  "${execlist[$c]}"  "${execlist[$((c+1))]}"
            c=$((c+2))
        done
        read -r -p "Choice: " output
    fi

    if [ "${output:-}" = "" ] ; then
        output="0"
    fi

    if [ "$output" = "0" ] ; then
        return 0
    elif [ "$output" -lt 0 ] ; then
        __errexit "Invalid output '$output'"
    else
        $selcmd "${sellist[$(($output-1))]}"
    fi
}

__main () {
    if command -v dialog >/dev/null ; then
        HAS_DIALOG=1
    fi

    if [ "$_run_usage" = "1" ] ; then
        __usage

    elif [ $# -lt 1 ] ; then
        __cmd_default
    else
        __cmd_commands "$@"
    fi
}

__usage () {
    cat <<EOUSAGE
Usage: $0 [OPTIONS] COMMAND

Displays a terminal dialog window to select from Kubernetes resources.

Commands:
    gcloud_config_configurations
                        Display or select a GCloud configuration
    kubectx             Display or select a Kubernetes context
    kubens              Display or select a Kubernetes namespace
EOUSAGE
    exit 1
}

_run_usage=0 _run_opt_version=0
while getopts "hHv" arg ; do
    case "$arg" in
        h)          _run_usage=1 ;;
        v)          _run_opt_version=1 ;;
        *)        _die "Unknown argument '$arg'" ;;
    esac
done
shift $((OPTIND-1))

__main "$@"

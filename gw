#!/usr/bin/env bash
# gw - a git worktree wrapper

#set -eu
#[ "${DEBUG:-0}" = "1" ] && set -x

#curdir="$(pwd)"
#prefix="$(git rev-parse --show-prefix)"
#gitroot="$(git rev-parse --show-toplevel)"
#branchname="$(git rev-parse --abbrev-ref HEAD)"

declare -a worktree_list gw_commandlist

DIALOG_ERROR=-1 DIALOG_OK=0 DIALOG_CANCEL=1 DIALOG_HELP=2
DIALOG_ITEM_HELP=2 DIALOG_EXTRA=3 DIALOG_TIMEOUT=5 DIALOG_ESC=255

gw_commandlist=(switch add convert remove list)

_debug () { printf "%s: Debug: %s\n" "$0" "$*" 1>&2 ; }
_errifnot () { if [ $1 -ne $2 ] ; then _debug "Error: return status $1" ; return 1 ; fi ; return 0 ; }

_get_worktree_list () {
    local wt='' branch=''
    while read -r -a entry ; do
        if [ "${entry[0]}" = "worktree" ] ; then
            wt="${entry[1]}"
        elif [ "${entry[0]}" = "branch" ] ; then
            branch="${entry[1]##refs/heads/}"
        elif [ -z "${entry[0]}" ] ; then
            worktree_list+=("$wt" "$branch")
            wt='' branch=''
        fi
    done < <(git worktree list --porcelain)
}

_map_entries () {
    local array="$1" data="$2" separator=$'\x1'
    # shellcheck disable=SC2034
    while IFS="$separator" read -r -a entry ; do
        eval "$array"'+=("${entry[@]}")'
    done <<<"$data"
}

_set_default_vars () {
    GIT_CLONE_OPTS=(--depth 1 --recurse-submodules --shallow-submodules)
    GW_DEFAULTBRANCH="${GW_DEFAULTBRANCH:-master}"
    # shellcheck disable=SC2016,SC2088
    [ -n "${GW_HIERARCHY:-}" ] || GW_HIERARCHY='~/git/${_repo_hostname}/${_repo_path}'
    # shellcheck disable=SC2016,SC2088
    [ -n "${GW_WORKTREE_HIERARCHY:-}" ] || GW_WORKTREE_HIERARCHY='${GW_HIERARCHY}/.git-gw'
}

# https://[username:password@]host/org/repo.git
# git@host:org/repo.git
_parse_git_remote_repo () {
    local repo="$1"
    if [[ "${repo%%:*}" =~ https? ]] ; then
        _repo_protocol="${repo%%:*}"
        _repo_hostname="${repo#*//}"
        _repo_userpass="${_repo_hostname%@*}"
        _repo_username="${_repo_userpass%:*}"
        _repo_password="${_repo_userpass#*:}"
        _repo_hostname="${_repo_hostname##*@}"
        _repo_remotepath="${_repo_hostname#*/}"
        _repo_hostname="${_repo_hostname%%/*}"
        _debug "Parsed repo '$repo': protocol '$_repo_protocol' host '$_repo_hostname' username '$_repo_username' password '$_repo_password' host '$_repo_hostname' remotepath '$_repo_remotepath'"
    elif [[ "${repo%%:*}" =~ [[:alnum:]_-]@[[:alnum:]-] ]] ; then
        _repo_protocol="git"
        _repo_username="${repo%%@*}"
        _repo_hostname="${repo##*@}"
        _repo_remotepath="${_repo_hostname##*:}"
        _repo_hostname="${_repo_hostname%%:*}"
        _debug "Parsed repo '$repo': protocol '$_repo_protocol' host '$_repo_hostname' username '$_repo_username' host '$_repo_hostname' remotepath '$_repo_remotepath'"
    fi
}

_set_repo_vars () {
    local repo="$1"
    
}

_gw_clone () {
    #local gitdir="$(
    #GIT_CLONE_OPTS+=(--separate-git-dir)
    git clone "${GIT_CLONE_OPTS[@]}" "$@"
}

_gw_switch () {
    # shellcheck disable=SC2155
    local prefix="$(git rev-parse --show-prefix)" prefixdir
    local execlist worktree_list c tmpfile result ret current prompttxt
    local branchname="$(git rev-parse --abbrev-ref HEAD)"
    prompttxt="$(printf "%s\n" "Select a worktree branch to change current directory to." "" "Current branch is indicated with an asterisk.")"
    execlist=(dialog --title "Worktree switch" --menu "$prompttxt" 0 0 0 -1 "(DEFAULT)")
    _get_worktree_list
    c=0; while [ $c -lt ${#worktree_list[@]} ] ; do
        current="${worktree_list[$((c+1))]}"
        if [ "$branchname" = "$current" ] ; then
            current="* $current"
        else
            current="  $current"
        fi
        execlist+=("$c" "$current")
        c=$((c+2))
    done
    tmpfile="$(mktemp)"
    "${execlist[@]}" 2>"$tmpfile"
    _errifnot $? $DIALOG_OK || return 1
    result="$(cat "$tmpfile")"
    rm -f "$tmpfile"
    [ "$result" = "-1" ] && return
    if [ -d "${worktree_list[$result]}" ] ; then
        echo "+ cd '${worktree_list[$result]}'"
        prefixdir="${old_worktree_prefix:-$prefix}"
        if [ ! -d "${worktree_list[$result]}/$prefixdir" ] ; then
            _debug "Could not find '$prefixdir' in worktree dir '${worktree_list[$result]}'; going to git root instead"
            old_worktree_prefix="$prefixdir"
            cd "${worktree_list[$result]}" || _debug "Could not cd to '${worktree_list[$result]}'"
        else
            unset old_worktree_prefix
            cd "${worktree_list[$result]}/$prefixdir" || _debug "Could not cd to '${worktree_list[$result]}/$prefixdir'"
        fi
    else
        _debug "No such directory '${worktree_list[$result]}'"
    fi
}

_gw_add () {
    local gitroot="$(git rev-parse --show-toplevel)"
    local branchname="$(git rev-parse --abbrev-ref HEAD)"
    local execlist result=() path ret args formdesc
    formdesc="$(printf "%s\n" \
        "Specify the following to add a new git worktree:" \
        "  1) 'Create new branch?' - put 'y' to create a new branch, and fill out the 'New branch' section." \
        "  2) 'Origin branch' - If not creating a new branch, this is the branch to use. If creating a new branch, this is the origin branch used to start a new branch." \
        "  3) 'New branch' - The new branch name, if created.")"
    execlist=(dialog --title "Add a new worktree" --form "$formdesc" 0 0 0 \
            "Create new branch (y/n)" 1 1 "y" 1 25 30 0 \
            "Origin branch" 2 1 "$branchname" 2 25 30 0 \
            "New branch" 3 1 "" 3 25 30 0)
    tmpfile="$(mktemp)"
    "${execlist[@]}" 2>"$tmpfile"
    _errifnot $? $DIALOG_OK || return 1
    IFS=$'\n' read -r -d '' -a result <"$tmpfile"
    rm -f "$tmpfile"
    if [ -z "${result[1]}" ] ; then
        _debug "No origin branch name" ; return 1
    fi
    args=(git worktree add)
    if [ "${result[0]:-}" = "y" -o "${result[0]:-}" = "Y" ] ; then
        if [ -z "${result[2]}" ] ; then
            _debug "No new branch name" ; return 1
        fi
        path="$(dirname "$gitroot")/${result[2]}"
        args+=("-b" "${result[2]}" "$path" "${result[1]}")
    else
        path="$(dirname "$gitroot")/${result[1]}"
        args+=("$path" "${result[1]}")
    fi
    echo "+ ${args[*]}"
    if "${args[@]}" ; then
        echo "+ cd '$path'"
        cd "$path"
    fi
}

_gw_convert () {
    local execlist=() gitroot branchname newdir prompttxt
    gitroot="$(git rev-parse --show-toplevel)"
    branchname="$(git rev-parse --abbrev-ref HEAD)"
    if [ -e "$(dirname "$gitroot")/.gwrc" ] ; then
        _debug "Parent is already a gw directory! Should be no need to convert"
        return 1
    fi
    prompttxt="$( printf "%s\n" \
        "Repository: $gitroot" \
        "Remote:" "$(git remote -v)" \
        "" \
        "New work directory will be '$gitroot/$branchname'." \
        "" \
        "Continue?" )"
    execlist=(dialog --title "Convert this repository to a worktree subdirectory" --yesno "$prompttxt" 0 0)
    "${execlist[@]}"
    _errifnot $? $DIALOG_OK || return 1
    newdir="$(mktemp -d)"
    if cp -a -v ./.??* ./* "$newdir/" ; then
        rm -rfv ./.??* ./*
        if mv -v "$newdir" "$branchname" ; then
            echo "ORIGIN_WORKDIR=\"$gitroot/$branchname\"" > .gwrc
            cd "$branchname"
        fi
    else
        _debug "Error while copying repo files to '$newdir/'"
    fi
}

_gw_remove () {
    local execlist=() gitroot branchname prompttxt 
    local c newworkdir curworkdir
    gitroot="$(git rev-parse --show-toplevel)"
    branchname="$(git rev-parse --abbrev-ref HEAD)"
    prompttxt="$( printf "%s\n" \
        "Repository: $gitroot" \
        "Remote:" "$(git remote -v)" \
        "" \
        "Remove worktree '$branchname' ?" )"
    _get_worktree_list
    newworkdir=''
    c=0; while [ $c -lt ${#worktree_list[@]} ] ; do
        current="${worktree_list[$((c+1))]}"
        if [ "$branchname" = "$current" ] ; then
            curworkdir="${worktree_list[$c]}"
        elif [ ! "$branchname" = "$current" ] && [ -z "${newworkdir:-}" ] ; then
            newworkdir="${worktree_list[$c]}"
        fi
        c=$((c+2))
    done
    execlist=(dialog --title "Remove worktree" --yesno "$prompttxt" 0 0)
    "${execlist[@]}"
    _errifnot $? $DIALOG_OK || return 1
    cd "$newworkdir"
    git worktree remove "$curworkdir"
}

_gw_list () {
    dialog --title "Worktree list" --msgbox "$(git worktree list -v)" -1 -1
}

_gw () {
    local execlist=() options=() c=0 result ret prompttxt gitroot
    gitroot="$(git rev-parse --show-toplevel)"
    prompttxt="$(printf "%s\n" "Repository: $gitroot" "" "Select a wrapper command")"
    execlist=(dialog --title "Git Worktree wrapper" --menu "$prompttxt" 0 0 0 -1 "(NONE)")
    for cmd in "${gw_commandlist[@]}" ; do
        execlist+=("$c" "$cmd")
        c=$((c+1))
    done
    tmpfile="$(mktemp)"
    "${execlist[@]}" 2>"$tmpfile"
    _errifnot $? $DIALOG_OK || return 1
    result="$(cat "$tmpfile")"
    rm -f "$tmpfile"
    [ "$result" = "-1" ] && return
    _gw_runcmd "${gw_commandlist[$result]}"
}

_gw_runcmd () {
    case "$1" in
        -h|--help)  _gw_usage ;;
        sw|switch)  _gw_switch ;;
        a|add)      _gw_add ;;
        convert)    _gw_convert ;;
        remove)     _gw_remove ;;
        list)       _gw_list ;;
        *)          _debug "Invalid command: '$1'" ;;
    esac
}

_gw_usage () {
    cat <<EOUSAGE
gw: Wrapper around 'git worktree'

Usage: $0 [COMMAND]

1. Keep a directory 'foo', and in that directory clone a Git repository, with the
   name of your main branch (so, 'foo/main').
2. Change to that directory and run '. gw' (if 'gw' is in your path, this will find
   'gw' and load it into your shell, which will enable it to change the current
   directory of your shell).
3. You can then select a command to run and the wrapper will make it easier to use.

Commands:

    switch          Switch to a worktree directory. Looks up your worktree list,
                    presents you with a list of branches, and when you select one,
                    your current shell will change to the directory of that worktree.

    add             Add a new worktree directory. Put in the name of the source branch
                    and the name of a new branch, and a new worktree will be created
                    with the new branch name (ex. 'foo/new-branch').

    convert         Convert a git repository into a worktree-compatible form. Basically
                    it just makes a new temp directory, copies all the files in the current
                    directory there, removes all the files in the current directory, and
                    then moves the temp directory into the current one with the name of the
                    branch that was previously checked out. From here you can run workdir
                    commands and they will create directories in a parent directory
                    (using the name of the branch you want a worktree for).

    list            List the current worktrees.
EOUSAGE
    return 1
}

#set -x
#_parse_git_remote_repo "https://foo:bar@github.com/someorg/somerepo.git"
#_parse_git_remote_repo "gituser@github.com:someorg/somerepo.git"

if [ -r .gwrc ] ; then
    origin_workdir="$(env -i sh -c 'set -a; . ./.gwrc ; echo $ORIGIN_WORKDIR')"
    _debug "Found .gwrc; moving to origin worktree '$origin_workdir'"
    cd "$origin_workdir"
fi

if ! git rev-parse 2>/dev/null ; then _debug "Current directory is not a Git work tree" ; return 1 ; fi

if [ $# -lt 1 ] ; then
    _gw
else
    _gw_runcmd "$@"
fi

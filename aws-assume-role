#!/usr/bin/env sh
# aws-assume-role - A wrapper to make it easier to assume AWS roles
# 
# The following is specifically written to return an exit code,
# _without exiting the current shell session_.
# This way this will work when sourced into a script, without
# exiting the parent script.

# If we set this and source this script, it will kill the script that sourced it
#set -e

assume_role () {
    local target_account="$1"; shift
    local target_role="$1"; shift
    local target_arn="arn:aws:iam::${target_account}:role/${target_role}"
    local my_role="$(aws sts assume-role --role-arn "${target_arn}" --role-session-name AWSCLI-Session)"
    [ -z "$my_role" ] && return 1
    AWS_ACCESS_KEY_ID=$(echo "$my_role" | jq -r .Credentials.AccessKeyId)
    AWS_SECRET_ACCESS_KEY=$(echo "$my_role" | jq -r .Credentials.SecretAccessKey)
    AWS_SESSION_TOKEN=$(echo "$my_role" | jq -r .Credentials.SessionToken)
    export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
}

_usage () {
    cat <<EOUSAGE 1>&2
Usage: $0 [OPTIONS] AWS_ACCOUNT_ID ROLE [-- CMD ..]

Options:
  --help                    This screen
  --export                  Print environment variables to stdout

Tries to assume the ROLE in AWS_ACCOUNT_ID,
and then sets AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN.

Before you can use this script, you have to already have valid AWS credentials set up.

Example:
  $ . $0 <target account id> target-admin-role
  $ aws sts get-caller-identity | jq -r .Arn
  arn:aws:sts::<target account id>:assumed-role/target-admin-role/AWSCLI-Session

  $ env \$($0 --export <target account id> <target-role>) aws s3 ls
  Successfully assumed role '<target-role>' in AWS account '<target account id>'
  2018-08-23 12:27:52 some-aws-s3-bucket-in-target-account

  $ $0 <target account id> target-admin-role -- aws s3 ls


EOUSAGE
    echo "--help"
    return 1
}

if [ $# -lt 2 ] || [ "$1" = "--help" ] ; then
    _usage
elif [ $# -eq 2 ] ; then
    EXPORT_VARS=0
    if [ "$1" = "--export" ] ; then
        shift
        EXPORT_VARS=1
    fi
    if assume_role "$1" "$2" ; then
        echo "Successfully assumed role '$2' in AWS account '$1'" 1>&2
        if [ $EXPORT_VARS -eq 1 ] ; then
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            echo AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
        fi
    else
        false
    fi
elif [ $# -gt 2 ] ; then
    if [ ! "$3" = "--" ] ; then
        echo "$0: Error: third argument should have been '--'" ; exit 1
    fi
    ACCT="$1"; shift
    ROLE="$1"; shift
    shift
    if assume_role "$ACCT" "$ROLE" ; then
        echo "Successfully assumed role '$ROLE' in AWS account '$ACCT'" 1>&2
        exec "$@"
    fi
fi

